const unsigned char DIGITS[][8] = {
{
  0b00000000,
  0b00000000,
  0b00001000,
  0b00011000,
  0b00001000,
  0b00001000,
  0b00011100,
  0b00000000
},{
  0b00000000,
  0b00000000,
  0b00111100,
  0b00000100,
  0b00111100,
  0b00100000,
  0b00111100,
  0b00000000
},{
  0b00000000,
  0b00000000,
  0b00111100,
  0b00000100,
  0b00111100,
  0b00000100,
  0b00111100,
  0b00000000
},{
  0b00000000,
  0b00000000,
  0b00100100,
  0b00100100,
  0b00111100,
  0b00000100,
  0b00000100,
  0b00000000
},{
  0b00000000,
  0b00000000,
  0b00111100,
  0b00100000,
  0b00111100,
  0b00000100,
  0b00111100,
  0b00000000
},{
  0b00000000,
  0b00000000,
  0b00111100,
  0b00100000,
  0b00111100,
  0b00100100,
  0b00111100,
  0b00000000
},{
  0b00000000,
  0b00000000,
  0b00111100,
  0b00000100,
  0b00001000,
  0b00010000,
  0b00010000,
  0b00000000
},{
  0b00000000,
  0b00000000,
  0b00111100,
  0b00100100,
  0b00111100,
  0b00100100,
  0b00111100,
  0b00000000
},{
  0b00000000,
  0b00000000,
  0b00111100,
  0b00100100,
  0b00111100,
  0b00000100,
  0b00111100,
  0b00000000
}};
const int DIGITS_LEN = sizeof(DIGITS)/8;

void transposeDigits(unsigned char DIGITS_Trans[DIGITS_LEN][8]){
  for (int idDigit = 0; idDigit<DIGITS_LEN; idDigit++){
    for (int id = 0; id < 8; id++){
      DIGITS_Trans[idDigit][8-id] = 0;
      for (int id2 = 0; id2 < 8; id2++){
        DIGITS_Trans[idDigit][8-id] += (1&(DIGITS[idDigit][id2]>>id))*(1<<(8-id2));
      }
    }
  }
}
